# -*- coding: utf-8 -*-
# Generated by Django 1.11.5 on 2017-09-12 08:18
from __future__ import unicode_literals

from django.db import migrations
import json
import os

from pdb import set_trace as st

APP = 'kuriocities'

# Custom loaders

def Location( apps, data ):
    rows = []
    Location = apps.get_model( APP, 'Location' )

    for data_group in data:
        city_model = apps.get_model( APP, 'City' )
        city       = city_model.objects.get( name = data_group ['city'] )

        rows += [
            Location( name=name, city=city )
            for name in data_group ['values']
        ]

    return Location.objects.bulk_create( rows )


def QuestionType( apps, data ):
    rows = []
    QuestionType = apps.get_model( APP, 'QuestionType' )

    for data_group in data:
        validation_type_model = apps.get_model( APP, 'ValidationType' )
        validation_type       = validation_type_model.objects.get( name = data_group ['validation_type'] )

        rows += [
            QuestionType( name=name, validation_type=validation_type )
            for name in data_group ['values']
        ]

    return QuestionType.objects.bulk_create( rows )


#####


def get_data( data_file ):
    with open( data_file ) as fp:
        return json.load( fp )


def get_data_files():
    return [
        data_file
        for data_file in os.scandir( '%s/data' % APP )
        if data_file.name.endswith( '.json' )
    ]


def load_model( model, data ):
    items = model.objects.bulk_create([
        model( name=name )
        for name in data
    ])
    print( '%s rows' % len( items ) )


def load_model_custom( apps, model_name, data ):
    func = globals().get( model_name )
    if not func:
        print( 'Custom loader not available: %s' % model_name )
    else:
        items = func( apps, data )
        print( '%s rows' % len( items ) )


def forwards( apps, schema_editor ):
    print( '' )
    deferred = []
    for data_file in get_data_files():
        model_name  = data_file.name.split( '.' ) [0]
        model       = apps.get_model( APP, model_name )
        data        = get_data( data_file )
        if isinstance( data[0], dict ):
            deferred.append([ apps, model_name, data ])
        else:
            print( 'Loading %s...' % model_name, end='' )
            load_model( model, data )

    for args in deferred:
        print( 'Loading %s...' % args[1], end='' )
        load_model_custom( *args )


def reverse( apps, schema_editor ):
    # return
    errors = []
    for data_file in get_data_files():
        model_name  = data_file.name.split( '.' ) [0]
        model       = apps.get_model( APP, model_name )
        try:
            model.objects.all().delete()
        except:
            errors.append( model )

    for model in errors:
        model.objects.all().delete()


class Migration(migrations.Migration):

    dependencies = [
        ( APP, '0001_initial' ),
    ]

    operations = [
        migrations.RunPython( forwards, reverse ),
    ]
